// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/character/character.proto" (package "sro.character", syntax proto3)
// tslint:disable
import { Empty } from "../../google/protobuf/empty";
import { TargetId } from "../globals";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Location } from "../globals";
import { QueryFilters } from "../filter";
import { FieldMask } from "../../google/protobuf/field_mask";
/**
 * @generated from protobuf message sro.character.GetCharacterRequest
 */
export interface GetCharacterRequest {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message sro.character.GetCharactersRequest
 */
export interface GetCharactersRequest {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
    /**
     * @generated from protobuf field: sro.QueryFilters filters = 2;
     */
    filters?: QueryFilters;
}
/**
 * @generated from protobuf message sro.character.GetUserCharactersRequest
 */
export interface GetUserCharactersRequest {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
    /**
     * @generated from protobuf field: sro.QueryFilters filters = 2;
     */
    filters?: QueryFilters;
    /**
     * @generated from protobuf field: string owner_id = 3;
     */
    ownerId: string;
}
/**
 * @generated from protobuf message sro.character.EditCharacterRequest
 */
export interface EditCharacterRequest {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
    /**
     * @generated from protobuf field: sro.character.Character character = 2;
     */
    character?: Character;
}
/**
 * @generated from protobuf message sro.character.CreateCharacterRequest
 */
export interface CreateCharacterRequest {
    /**
     * @generated from protobuf field: string owner_id = 1;
     */
    ownerId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string gender = 3;
     */
    gender: string;
    /**
     * @generated from protobuf field: string realm = 4;
     */
    realm: string;
    /**
     * @generated from protobuf field: string dimension_id = 5;
     */
    dimensionId: string;
    /**
     * @generated from protobuf field: string profession = 6;
     */
    profession: string;
}
/**
 * @generated from protobuf message sro.character.Character
 */
export interface Character {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string owner_id = 2;
     */
    ownerId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string gender = 4;
     */
    gender: string;
    /**
     * @generated from protobuf field: string realm = 5;
     */
    realm: string;
    /**
     * @generated from protobuf field: int32 play_time = 6;
     */
    playTime: number;
    /**
     * @generated from protobuf field: sro.Location location = 7;
     */
    location?: Location;
    /**
     * @generated from protobuf field: string dimension_id = 8;
     */
    dimensionId: string;
    /**
     * @generated from protobuf field: int64 created_at = 9;
     */
    createdAt: number;
    /**
     * @generated from protobuf field: int64 updated_at = 10;
     */
    updatedAt: number;
    /**
     * @generated from protobuf field: int64 deleted_at = 11;
     */
    deletedAt: number;
    /**
     * @generated from protobuf field: string profession = 12;
     */
    profession: string;
}
/**
 * @generated from protobuf message sro.character.Characters
 */
export interface Characters {
    /**
     * @generated from protobuf field: int64 total = 1;
     */
    total: number;
    /**
     * @generated from protobuf field: repeated sro.character.Character characters = 2;
     */
    characters: Character[];
}
/**
 * @generated from protobuf message sro.character.AddPlayTimeRequest
 */
export interface AddPlayTimeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int32 time = 2;
     */
    time: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCharacterRequest$Type extends MessageType<GetCharacterRequest> {
    constructor() {
        super("sro.character.GetCharacterRequest", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCharacterRequest>): GetCharacterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetCharacterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCharacterRequest): GetCharacterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCharacterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.GetCharacterRequest
 */
export const GetCharacterRequest = new GetCharacterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCharactersRequest$Type extends MessageType<GetCharactersRequest> {
    constructor() {
        super("sro.character.GetCharactersRequest", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask },
            { no: 2, name: "filters", kind: "message", T: () => QueryFilters }
        ]);
    }
    create(value?: PartialMessage<GetCharactersRequest>): GetCharactersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCharactersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCharactersRequest): GetCharactersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* sro.QueryFilters filters */ 2:
                    message.filters = QueryFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCharactersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sro.QueryFilters filters = 2; */
        if (message.filters)
            QueryFilters.internalBinaryWrite(message.filters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.GetCharactersRequest
 */
export const GetCharactersRequest = new GetCharactersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserCharactersRequest$Type extends MessageType<GetUserCharactersRequest> {
    constructor() {
        super("sro.character.GetUserCharactersRequest", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask },
            { no: 2, name: "filters", kind: "message", T: () => QueryFilters },
            { no: 3, name: "owner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserCharactersRequest>): GetUserCharactersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ownerId = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserCharactersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserCharactersRequest): GetUserCharactersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* sro.QueryFilters filters */ 2:
                    message.filters = QueryFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                case /* string owner_id */ 3:
                    message.ownerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserCharactersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sro.QueryFilters filters = 2; */
        if (message.filters)
            QueryFilters.internalBinaryWrite(message.filters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string owner_id = 3; */
        if (message.ownerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ownerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.GetUserCharactersRequest
 */
export const GetUserCharactersRequest = new GetUserCharactersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCharacterRequest$Type extends MessageType<EditCharacterRequest> {
    constructor() {
        super("sro.character.EditCharacterRequest", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask },
            { no: 2, name: "character", kind: "message", T: () => Character }
        ]);
    }
    create(value?: PartialMessage<EditCharacterRequest>): EditCharacterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EditCharacterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCharacterRequest): EditCharacterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* sro.character.Character character */ 2:
                    message.character = Character.internalBinaryRead(reader, reader.uint32(), options, message.character);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCharacterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sro.character.Character character = 2; */
        if (message.character)
            Character.internalBinaryWrite(message.character, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.EditCharacterRequest
 */
export const EditCharacterRequest = new EditCharacterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCharacterRequest$Type extends MessageType<CreateCharacterRequest> {
    constructor() {
        super("sro.character.CreateCharacterRequest", [
            { no: 1, name: "owner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "realm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "dimension_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "profession", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCharacterRequest>): CreateCharacterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ownerId = "";
        message.name = "";
        message.gender = "";
        message.realm = "";
        message.dimensionId = "";
        message.profession = "";
        if (value !== undefined)
            reflectionMergePartial<CreateCharacterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCharacterRequest): CreateCharacterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner_id */ 1:
                    message.ownerId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string gender */ 3:
                    message.gender = reader.string();
                    break;
                case /* string realm */ 4:
                    message.realm = reader.string();
                    break;
                case /* string dimension_id */ 5:
                    message.dimensionId = reader.string();
                    break;
                case /* string profession */ 6:
                    message.profession = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCharacterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner_id = 1; */
        if (message.ownerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ownerId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string gender = 3; */
        if (message.gender !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gender);
        /* string realm = 4; */
        if (message.realm !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.realm);
        /* string dimension_id = 5; */
        if (message.dimensionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.dimensionId);
        /* string profession = 6; */
        if (message.profession !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.profession);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.CreateCharacterRequest
 */
export const CreateCharacterRequest = new CreateCharacterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Character$Type extends MessageType<Character> {
    constructor() {
        super("sro.character.Character", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "owner_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "realm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "play_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "location", kind: "message", T: () => Location },
            { no: 8, name: "dimension_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "updated_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "deleted_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "profession", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Character>): Character {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.ownerId = "";
        message.name = "";
        message.gender = "";
        message.realm = "";
        message.playTime = 0;
        message.dimensionId = "";
        message.createdAt = 0;
        message.updatedAt = 0;
        message.deletedAt = 0;
        message.profession = "";
        if (value !== undefined)
            reflectionMergePartial<Character>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Character): Character {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string owner_id */ 2:
                    message.ownerId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string gender */ 4:
                    message.gender = reader.string();
                    break;
                case /* string realm */ 5:
                    message.realm = reader.string();
                    break;
                case /* int32 play_time */ 6:
                    message.playTime = reader.int32();
                    break;
                case /* sro.Location location */ 7:
                    message.location = Location.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* string dimension_id */ 8:
                    message.dimensionId = reader.string();
                    break;
                case /* int64 created_at */ 9:
                    message.createdAt = reader.int64().toNumber();
                    break;
                case /* int64 updated_at */ 10:
                    message.updatedAt = reader.int64().toNumber();
                    break;
                case /* int64 deleted_at */ 11:
                    message.deletedAt = reader.int64().toNumber();
                    break;
                case /* string profession */ 12:
                    message.profession = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Character, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string owner_id = 2; */
        if (message.ownerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ownerId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string gender = 4; */
        if (message.gender !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gender);
        /* string realm = 5; */
        if (message.realm !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.realm);
        /* int32 play_time = 6; */
        if (message.playTime !== 0)
            writer.tag(6, WireType.Varint).int32(message.playTime);
        /* sro.Location location = 7; */
        if (message.location)
            Location.internalBinaryWrite(message.location, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string dimension_id = 8; */
        if (message.dimensionId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.dimensionId);
        /* int64 created_at = 9; */
        if (message.createdAt !== 0)
            writer.tag(9, WireType.Varint).int64(message.createdAt);
        /* int64 updated_at = 10; */
        if (message.updatedAt !== 0)
            writer.tag(10, WireType.Varint).int64(message.updatedAt);
        /* int64 deleted_at = 11; */
        if (message.deletedAt !== 0)
            writer.tag(11, WireType.Varint).int64(message.deletedAt);
        /* string profession = 12; */
        if (message.profession !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.profession);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.Character
 */
export const Character = new Character$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Characters$Type extends MessageType<Characters> {
    constructor() {
        super("sro.character.Characters", [
            { no: 1, name: "total", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "characters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Character }
        ]);
    }
    create(value?: PartialMessage<Characters>): Characters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.characters = [];
        if (value !== undefined)
            reflectionMergePartial<Characters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Characters): Characters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total */ 1:
                    message.total = reader.int64().toNumber();
                    break;
                case /* repeated sro.character.Character characters */ 2:
                    message.characters.push(Character.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Characters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).int64(message.total);
        /* repeated sro.character.Character characters = 2; */
        for (let i = 0; i < message.characters.length; i++)
            Character.internalBinaryWrite(message.characters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.Characters
 */
export const Characters = new Characters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPlayTimeRequest$Type extends MessageType<AddPlayTimeRequest> {
    constructor() {
        super("sro.character.AddPlayTimeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AddPlayTimeRequest>): AddPlayTimeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.time = 0;
        if (value !== undefined)
            reflectionMergePartial<AddPlayTimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPlayTimeRequest): AddPlayTimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 time */ 2:
                    message.time = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPlayTimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 time = 2; */
        if (message.time !== 0)
            writer.tag(2, WireType.Varint).int32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.AddPlayTimeRequest
 */
export const AddPlayTimeRequest = new AddPlayTimeRequest$Type();
/**
 * @generated ServiceType for protobuf service sro.character.CharacterService
 */
export const CharacterService = new ServiceType("sro.character.CharacterService", [
    { name: "GetCharacter", options: { "google.api.http": { get: "/v1/characters/id/{id}" } }, I: GetCharacterRequest, O: Character },
    { name: "GetCharacters", options: { "google.api.http": { get: "/v1/characters" } }, I: GetCharactersRequest, O: Characters },
    { name: "GetCharactersForUser", options: { "google.api.http": { get: "/v1/characters/owner/{owner_id}" } }, I: GetUserCharactersRequest, O: Characters },
    { name: "CreateCharacter", options: { "google.api.http": { post: "/v1/characters", body: "*" } }, I: CreateCharacterRequest, O: Character },
    { name: "DeleteCharacter", options: { "google.api.http": { delete: "/v1/characters/id/{id}" } }, I: TargetId, O: Empty },
    { name: "EditCharacter", options: { "google.api.http": { patch: "/v1/characters/id/{character.id}", body: "*" } }, I: EditCharacterRequest, O: Character },
    { name: "AddCharacterPlayTime", options: { "google.api.http": { patch: "/v1/characters/id/{id}/playtime", body: "time" } }, I: AddPlayTimeRequest, O: Empty }
]);

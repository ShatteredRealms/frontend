// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/character/inventory.proto" (package "sro.character", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldMask } from "../../google/protobuf/field_mask";
/**
 * @generated from protobuf message sro.character.GetInventoryRequest
 */
export interface GetInventoryRequest {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
    /**
     * @generated from protobuf field: string character_id = 2;
     */
    characterId: string;
}
/**
 * @generated from protobuf message sro.character.GetInventoryResponse
 */
export interface GetInventoryResponse {
    /**
     * @generated from protobuf field: repeated sro.character.Item items = 1;
     */
    items: Item[];
}
/**
 * @generated from protobuf message sro.character.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: uint32 slot = 2;
     */
    slot: number;
    /**
     * @generated from protobuf field: uint32 quantity = 3;
     */
    quantity: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetInventoryRequest$Type extends MessageType<GetInventoryRequest> {
    constructor() {
        super("sro.character.GetInventoryRequest", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask },
            { no: 2, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetInventoryRequest>): GetInventoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterId = "";
        if (value !== undefined)
            reflectionMergePartial<GetInventoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInventoryRequest): GetInventoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                case /* string character_id */ 2:
                    message.characterId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInventoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string character_id = 2; */
        if (message.characterId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.characterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.GetInventoryRequest
 */
export const GetInventoryRequest = new GetInventoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInventoryResponse$Type extends MessageType<GetInventoryResponse> {
    constructor() {
        super("sro.character.GetInventoryResponse", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<GetInventoryResponse>): GetInventoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<GetInventoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInventoryResponse): GetInventoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sro.character.Item items */ 1:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInventoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sro.character.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.GetInventoryResponse
 */
export const GetInventoryResponse = new GetInventoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("sro.character.Item", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "slot", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "quantity", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.slot = 0;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* uint32 slot */ 2:
                    message.slot = reader.uint32();
                    break;
                case /* uint32 quantity */ 3:
                    message.quantity = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* uint32 slot = 2; */
        if (message.slot !== 0)
            writer.tag(2, WireType.Varint).uint32(message.slot);
        /* uint32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).uint32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.character.Item
 */
export const Item = new Item$Type();
/**
 * @generated ServiceType for protobuf service sro.character.InventoryService
 */
export const InventoryService = new ServiceType("sro.character.InventoryService", [
    { name: "GetInventory", options: { "google.api.http": { get: "/v1/characters/id/{character_id}/inventory" } }, I: GetInventoryRequest, O: GetInventoryResponse }
]);

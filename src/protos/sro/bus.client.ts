// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/bus.proto" (package "sro", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BusService } from "./bus";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ResetBusResponse } from "./bus";
import type { BusTarget } from "./bus";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sro.BusService
 */
export interface IBusServiceClient {
    /**
     * @generated from protobuf rpc: ResetReaderBus(sro.BusTarget) returns (sro.ResetBusResponse);
     */
    resetReaderBus(input: BusTarget, options?: RpcOptions): UnaryCall<BusTarget, ResetBusResponse>;
    /**
     * @generated from protobuf rpc: ResetWriterBus(sro.BusTarget) returns (sro.ResetBusResponse);
     */
    resetWriterBus(input: BusTarget, options?: RpcOptions): UnaryCall<BusTarget, ResetBusResponse>;
}
/**
 * @generated from protobuf service sro.BusService
 */
export class BusServiceClient implements IBusServiceClient, ServiceInfo {
    typeName = BusService.typeName;
    methods = BusService.methods;
    options = BusService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ResetReaderBus(sro.BusTarget) returns (sro.ResetBusResponse);
     */
    resetReaderBus(input: BusTarget, options?: RpcOptions): UnaryCall<BusTarget, ResetBusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BusTarget, ResetBusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetWriterBus(sro.BusTarget) returns (sro.ResetBusResponse);
     */
    resetWriterBus(input: BusTarget, options?: RpcOptions): UnaryCall<BusTarget, ResetBusResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BusTarget, ResetBusResponse>("unary", this._transport, method, opt, input);
    }
}

// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/chat/chat.proto" (package "sro.chat", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatService } from "./chat";
import type { ChatLogs } from "./chat";
import type { ChatLogRequest } from "./chat";
import type { BanRequest } from "./chat";
import type { RequestUpdateCharacterSetChatChannelAuth } from "./chat";
import type { RequestSetCharacterSetChatChannelAuth } from "./chat";
import type { UpdateChatChannelRequest } from "./chat";
import type { CreateChatChannelMessage } from "./chat";
import type { ChatChannel } from "./chat";
import type { ChatChannels } from "./chat";
import type { SendDirectMessageRequest } from "./chat";
import type { Empty } from "../../google/protobuf/empty";
import type { SendChatChannelMessageRequest } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { TargetId } from "../globals";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ChatMessage } from "./chat";
import type { ConnectChatChannelRequest } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sro.chat.ChatService
 */
export interface IChatServiceClient {
    /**
     * @generated from protobuf rpc: ConnectChatChannel(sro.chat.ConnectChatChannelRequest) returns (stream sro.chat.ChatMessage);
     */
    connectChatChannel(input: ConnectChatChannelRequest, options?: RpcOptions): ServerStreamingCall<ConnectChatChannelRequest, ChatMessage>;
    /**
     * @generated from protobuf rpc: ConnectDirectMessages(sro.TargetId) returns (stream sro.chat.ChatMessage);
     */
    connectDirectMessages(input: TargetId, options?: RpcOptions): ServerStreamingCall<TargetId, ChatMessage>;
    /**
     * @generated from protobuf rpc: SendChatChannelMessage(sro.chat.SendChatChannelMessageRequest) returns (google.protobuf.Empty);
     */
    sendChatChannelMessage(input: SendChatChannelMessageRequest, options?: RpcOptions): UnaryCall<SendChatChannelMessageRequest, Empty>;
    /**
     * @generated from protobuf rpc: SendDirectMessage(sro.chat.SendDirectMessageRequest) returns (google.protobuf.Empty);
     */
    sendDirectMessage(input: SendDirectMessageRequest, options?: RpcOptions): UnaryCall<SendDirectMessageRequest, Empty>;
    /**
     * TODO: Have request allow for filtering
     *
     * @generated from protobuf rpc: GetChatChannels(google.protobuf.Empty) returns (sro.chat.ChatChannels);
     */
    getChatChannels(input: Empty, options?: RpcOptions): UnaryCall<Empty, ChatChannels>;
    /**
     * @generated from protobuf rpc: GetChatChannel(sro.TargetId) returns (sro.chat.ChatChannel);
     */
    getChatChannel(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannel>;
    /**
     * @generated from protobuf rpc: CreateChatChannel(sro.chat.CreateChatChannelMessage) returns (sro.chat.ChatChannel);
     */
    createChatChannel(input: CreateChatChannelMessage, options?: RpcOptions): UnaryCall<CreateChatChannelMessage, ChatChannel>;
    /**
     * @generated from protobuf rpc: DeleteChatChannel(sro.TargetId) returns (sro.chat.ChatChannel);
     */
    deleteChatChannel(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannel>;
    /**
     * @generated from protobuf rpc: EditChatChannel(sro.chat.UpdateChatChannelRequest) returns (sro.chat.ChatChannel);
     */
    editChatChannel(input: UpdateChatChannelRequest, options?: RpcOptions): UnaryCall<UpdateChatChannelRequest, ChatChannel>;
    /**
     * @generated from protobuf rpc: GetAuthorizedChatChannels(sro.TargetId) returns (sro.chat.ChatChannels);
     */
    getAuthorizedChatChannels(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannels>;
    /**
     * Sets the character chat channels to the given list of channels
     *
     * @generated from protobuf rpc: SetCharacterChatChannelAuth(sro.chat.RequestSetCharacterSetChatChannelAuth) returns (google.protobuf.Empty);
     */
    setCharacterChatChannelAuth(input: RequestSetCharacterSetChatChannelAuth, options?: RpcOptions): UnaryCall<RequestSetCharacterSetChatChannelAuth, Empty>;
    /**
     * If add is true, adds the given channels to the character's chat channels,
     * otherwise removes them
     *
     * @generated from protobuf rpc: UpdateCharacterChatChannelAuth(sro.chat.RequestUpdateCharacterSetChatChannelAuth) returns (google.protobuf.Empty);
     */
    updateCharacterChatChannelAuth(input: RequestUpdateCharacterSetChatChannelAuth, options?: RpcOptions): UnaryCall<RequestUpdateCharacterSetChatChannelAuth, Empty>;
    /**
     * @generated from protobuf rpc: BanCharacterFromChatChannel(sro.chat.BanRequest) returns (google.protobuf.Empty);
     */
    banCharacterFromChatChannel(input: BanRequest, options?: RpcOptions): UnaryCall<BanRequest, Empty>;
    /**
     * @generated from protobuf rpc: GetChatLogs(sro.chat.ChatLogRequest) returns (sro.chat.ChatLogs);
     */
    getChatLogs(input: ChatLogRequest, options?: RpcOptions): UnaryCall<ChatLogRequest, ChatLogs>;
}
/**
 * @generated from protobuf service sro.chat.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ConnectChatChannel(sro.chat.ConnectChatChannelRequest) returns (stream sro.chat.ChatMessage);
     */
    connectChatChannel(input: ConnectChatChannelRequest, options?: RpcOptions): ServerStreamingCall<ConnectChatChannelRequest, ChatMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectChatChannelRequest, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConnectDirectMessages(sro.TargetId) returns (stream sro.chat.ChatMessage);
     */
    connectDirectMessages(input: TargetId, options?: RpcOptions): ServerStreamingCall<TargetId, ChatMessage> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendChatChannelMessage(sro.chat.SendChatChannelMessageRequest) returns (google.protobuf.Empty);
     */
    sendChatChannelMessage(input: SendChatChannelMessageRequest, options?: RpcOptions): UnaryCall<SendChatChannelMessageRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendChatChannelMessageRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendDirectMessage(sro.chat.SendDirectMessageRequest) returns (google.protobuf.Empty);
     */
    sendDirectMessage(input: SendDirectMessageRequest, options?: RpcOptions): UnaryCall<SendDirectMessageRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendDirectMessageRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * TODO: Have request allow for filtering
     *
     * @generated from protobuf rpc: GetChatChannels(google.protobuf.Empty) returns (sro.chat.ChatChannels);
     */
    getChatChannels(input: Empty, options?: RpcOptions): UnaryCall<Empty, ChatChannels> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ChatChannels>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChatChannel(sro.TargetId) returns (sro.chat.ChatChannel);
     */
    getChatChannel(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannel> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, ChatChannel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateChatChannel(sro.chat.CreateChatChannelMessage) returns (sro.chat.ChatChannel);
     */
    createChatChannel(input: CreateChatChannelMessage, options?: RpcOptions): UnaryCall<CreateChatChannelMessage, ChatChannel> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateChatChannelMessage, ChatChannel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteChatChannel(sro.TargetId) returns (sro.chat.ChatChannel);
     */
    deleteChatChannel(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannel> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, ChatChannel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EditChatChannel(sro.chat.UpdateChatChannelRequest) returns (sro.chat.ChatChannel);
     */
    editChatChannel(input: UpdateChatChannelRequest, options?: RpcOptions): UnaryCall<UpdateChatChannelRequest, ChatChannel> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateChatChannelRequest, ChatChannel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAuthorizedChatChannels(sro.TargetId) returns (sro.chat.ChatChannels);
     */
    getAuthorizedChatChannels(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, ChatChannels> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, ChatChannels>("unary", this._transport, method, opt, input);
    }
    /**
     * Sets the character chat channels to the given list of channels
     *
     * @generated from protobuf rpc: SetCharacterChatChannelAuth(sro.chat.RequestSetCharacterSetChatChannelAuth) returns (google.protobuf.Empty);
     */
    setCharacterChatChannelAuth(input: RequestSetCharacterSetChatChannelAuth, options?: RpcOptions): UnaryCall<RequestSetCharacterSetChatChannelAuth, Empty> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestSetCharacterSetChatChannelAuth, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * If add is true, adds the given channels to the character's chat channels,
     * otherwise removes them
     *
     * @generated from protobuf rpc: UpdateCharacterChatChannelAuth(sro.chat.RequestUpdateCharacterSetChatChannelAuth) returns (google.protobuf.Empty);
     */
    updateCharacterChatChannelAuth(input: RequestUpdateCharacterSetChatChannelAuth, options?: RpcOptions): UnaryCall<RequestUpdateCharacterSetChatChannelAuth, Empty> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestUpdateCharacterSetChatChannelAuth, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BanCharacterFromChatChannel(sro.chat.BanRequest) returns (google.protobuf.Empty);
     */
    banCharacterFromChatChannel(input: BanRequest, options?: RpcOptions): UnaryCall<BanRequest, Empty> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<BanRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChatLogs(sro.chat.ChatLogRequest) returns (sro.chat.ChatLogs);
     */
    getChatLogs(input: ChatLogRequest, options?: RpcOptions): UnaryCall<ChatLogRequest, ChatLogs> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatLogRequest, ChatLogs>("unary", this._transport, method, opt, input);
    }
}

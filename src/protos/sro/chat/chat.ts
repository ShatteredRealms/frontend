// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/chat/chat.proto" (package "sro.chat", syntax proto3)
// tslint:disable
import { Empty } from "../../google/protobuf/empty";
import { TargetId } from "../globals";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sro.chat.ChatLogRequest
 */
export interface ChatLogRequest {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf oneof: optional_sender_id
     */
    optionalSenderId: {
        oneofKind: "senderId";
        /**
         * @generated from protobuf field: string sender_id = 2;
         */
        senderId: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_before
     */
    optionalBefore: {
        oneofKind: "before";
        /**
         * @generated from protobuf field: int64 before = 3;
         */
        before: number;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_after
     */
    optionalAfter: {
        oneofKind: "after";
        /**
         * @generated from protobuf field: int64 after = 4;
         */
        after: number;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_limit
     */
    optionalLimit: {
        oneofKind: "limit";
        /**
         * @generated from protobuf field: uint64 limit = 5;
         */
        limit: number;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_offset
     */
    optionalOffset: {
        oneofKind: "offset";
        /**
         * @generated from protobuf field: uint64 offset = 6;
         */
        offset: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message sro.chat.ChatLog
 */
export interface ChatLog {
    /**
     * @generated from protobuf field: uint64 sent_at = 1;
     */
    sentAt: number;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string sender_id = 3;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
}
/**
 * @generated from protobuf message sro.chat.ChatLogs
 */
export interface ChatLogs {
    /**
     * @generated from protobuf field: uint64 total = 1;
     */
    total: number;
    /**
     * @generated from protobuf field: repeated sro.chat.ChatLog logs = 2;
     */
    logs: ChatLog[];
}
/**
 * @generated from protobuf message sro.chat.BanRequest
 */
export interface BanRequest {
    /**
     * @generated from protobuf field: string character_id = 1;
     */
    characterId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * Duration in seconds.
     * If 0, the ban is will not expire.
     * If -1, the ban is lifted. int64 duration = 3;
     *
     * @generated from protobuf field: int64 duration = 3;
     */
    duration: number;
}
/**
 * @generated from protobuf message sro.chat.ConnectChatChannelRequest
 */
export interface ConnectChatChannelRequest {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string character_id = 2;
     */
    characterId: string;
}
/**
 * @generated from protobuf message sro.chat.RequestSetCharacterSetChatChannelAuth
 */
export interface RequestSetCharacterSetChatChannelAuth {
    /**
     * @generated from protobuf field: string character_id = 1;
     */
    characterId: string;
    /**
     * @generated from protobuf field: repeated string ids = 2;
     */
    ids: string[];
}
/**
 * @generated from protobuf message sro.chat.RequestUpdateCharacterSetChatChannelAuth
 */
export interface RequestUpdateCharacterSetChatChannelAuth {
    /**
     * @generated from protobuf field: string character_id = 1;
     */
    characterId: string;
    /**
     * @generated from protobuf field: bool add = 2;
     */
    add: boolean;
    /**
     * @generated from protobuf field: repeated string ids = 3;
     */
    ids: string[];
}
/**
 * @generated from protobuf message sro.chat.ChatChannel
 */
export interface ChatChannel {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string dimension_id = 3;
     */
    dimensionId: string;
    /**
     * @generated from protobuf field: bool public = 4;
     */
    public: boolean;
}
/**
 * @generated from protobuf message sro.chat.ChatChannels
 */
export interface ChatChannels {
    /**
     * @generated from protobuf field: repeated sro.chat.ChatChannel channels = 1;
     */
    channels: ChatChannel[];
}
/**
 * @generated from protobuf message sro.chat.CreateChatChannelMessage
 */
export interface CreateChatChannelMessage {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string dimension_id = 2;
     */
    dimensionId: string;
}
/**
 * @generated from protobuf message sro.chat.ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: string sender_character_id = 1;
     */
    senderCharacterId: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: int64 sent_time_ms = 3;
     */
    sentTimeMs: number;
}
/**
 * @generated from protobuf message sro.chat.SendChatChannelMessageRequest
 */
export interface SendChatChannelMessageRequest {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf field: sro.chat.ChatMessage chat_message = 2;
     */
    chatMessage?: ChatMessage;
}
/**
 * @generated from protobuf message sro.chat.SendDirectMessageRequest
 */
export interface SendDirectMessageRequest {
    /**
     * @generated from protobuf field: string character_id = 1;
     */
    characterId: string;
    /**
     * @generated from protobuf field: sro.chat.ChatMessage chat_message = 2;
     */
    chatMessage?: ChatMessage;
}
/**
 * @generated from protobuf message sro.chat.UpdateChatChannelRequest
 */
export interface UpdateChatChannelRequest {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf oneof: optional_name
     */
    optionalName: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_dimension
     */
    optionalDimension: {
        oneofKind: "dimension";
        /**
         * @generated from protobuf field: string dimension = 3;
         */
        dimension: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_public
     */
    optionalPublic: {
        oneofKind: "public";
        /**
         * @generated from protobuf field: bool public = 4;
         */
        public: boolean;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ChatLogRequest$Type extends MessageType<ChatLogRequest> {
    constructor() {
        super("sro.chat.ChatLogRequest", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sender_id", kind: "scalar", oneof: "optionalSenderId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "before", kind: "scalar", oneof: "optionalBefore", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "after", kind: "scalar", oneof: "optionalAfter", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "limit", kind: "scalar", oneof: "optionalLimit", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "offset", kind: "scalar", oneof: "optionalOffset", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChatLogRequest>): ChatLogRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelId = "";
        message.optionalSenderId = { oneofKind: undefined };
        message.optionalBefore = { oneofKind: undefined };
        message.optionalAfter = { oneofKind: undefined };
        message.optionalLimit = { oneofKind: undefined };
        message.optionalOffset = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ChatLogRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatLogRequest): ChatLogRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* string sender_id */ 2:
                    message.optionalSenderId = {
                        oneofKind: "senderId",
                        senderId: reader.string()
                    };
                    break;
                case /* int64 before */ 3:
                    message.optionalBefore = {
                        oneofKind: "before",
                        before: reader.int64().toNumber()
                    };
                    break;
                case /* int64 after */ 4:
                    message.optionalAfter = {
                        oneofKind: "after",
                        after: reader.int64().toNumber()
                    };
                    break;
                case /* uint64 limit */ 5:
                    message.optionalLimit = {
                        oneofKind: "limit",
                        limit: reader.uint64().toNumber()
                    };
                    break;
                case /* uint64 offset */ 6:
                    message.optionalOffset = {
                        oneofKind: "offset",
                        offset: reader.uint64().toNumber()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatLogRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* string sender_id = 2; */
        if (message.optionalSenderId.oneofKind === "senderId")
            writer.tag(2, WireType.LengthDelimited).string(message.optionalSenderId.senderId);
        /* int64 before = 3; */
        if (message.optionalBefore.oneofKind === "before")
            writer.tag(3, WireType.Varint).int64(message.optionalBefore.before);
        /* int64 after = 4; */
        if (message.optionalAfter.oneofKind === "after")
            writer.tag(4, WireType.Varint).int64(message.optionalAfter.after);
        /* uint64 limit = 5; */
        if (message.optionalLimit.oneofKind === "limit")
            writer.tag(5, WireType.Varint).uint64(message.optionalLimit.limit);
        /* uint64 offset = 6; */
        if (message.optionalOffset.oneofKind === "offset")
            writer.tag(6, WireType.Varint).uint64(message.optionalOffset.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatLogRequest
 */
export const ChatLogRequest = new ChatLogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatLog$Type extends MessageType<ChatLog> {
    constructor() {
        super("sro.chat.ChatLog", [
            { no: 1, name: "sent_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sender_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatLog>): ChatLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentAt = 0;
        message.channelId = "";
        message.senderId = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ChatLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatLog): ChatLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sent_at */ 1:
                    message.sentAt = reader.uint64().toNumber();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string sender_id */ 3:
                    message.senderId = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sent_at = 1; */
        if (message.sentAt !== 0)
            writer.tag(1, WireType.Varint).uint64(message.sentAt);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string sender_id = 3; */
        if (message.senderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderId);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatLog
 */
export const ChatLog = new ChatLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatLogs$Type extends MessageType<ChatLogs> {
    constructor() {
        super("sro.chat.ChatLogs", [
            { no: 1, name: "total", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatLog }
        ]);
    }
    create(value?: PartialMessage<ChatLogs>): ChatLogs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.total = 0;
        message.logs = [];
        if (value !== undefined)
            reflectionMergePartial<ChatLogs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatLogs): ChatLogs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 total */ 1:
                    message.total = reader.uint64().toNumber();
                    break;
                case /* repeated sro.chat.ChatLog logs */ 2:
                    message.logs.push(ChatLog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatLogs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).uint64(message.total);
        /* repeated sro.chat.ChatLog logs = 2; */
        for (let i = 0; i < message.logs.length; i++)
            ChatLog.internalBinaryWrite(message.logs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatLogs
 */
export const ChatLogs = new ChatLogs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BanRequest$Type extends MessageType<BanRequest> {
    constructor() {
        super("sro.chat.BanRequest", [
            { no: 1, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<BanRequest>): BanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterId = "";
        message.channelId = "";
        message.duration = 0;
        if (value !== undefined)
            reflectionMergePartial<BanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BanRequest): BanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string character_id */ 1:
                    message.characterId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string character_id = 1; */
        if (message.characterId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.characterId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* int64 duration = 3; */
        if (message.duration !== 0)
            writer.tag(3, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.BanRequest
 */
export const BanRequest = new BanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectChatChannelRequest$Type extends MessageType<ConnectChatChannelRequest> {
    constructor() {
        super("sro.chat.ConnectChatChannelRequest", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectChatChannelRequest>): ConnectChatChannelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelId = "";
        message.characterId = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectChatChannelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectChatChannelRequest): ConnectChatChannelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* string character_id */ 2:
                    message.characterId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectChatChannelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* string character_id = 2; */
        if (message.characterId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.characterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ConnectChatChannelRequest
 */
export const ConnectChatChannelRequest = new ConnectChatChannelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestSetCharacterSetChatChannelAuth$Type extends MessageType<RequestSetCharacterSetChatChannelAuth> {
    constructor() {
        super("sro.chat.RequestSetCharacterSetChatChannelAuth", [
            { no: 1, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestSetCharacterSetChatChannelAuth>): RequestSetCharacterSetChatChannelAuth {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterId = "";
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<RequestSetCharacterSetChatChannelAuth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestSetCharacterSetChatChannelAuth): RequestSetCharacterSetChatChannelAuth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string character_id */ 1:
                    message.characterId = reader.string();
                    break;
                case /* repeated string ids */ 2:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestSetCharacterSetChatChannelAuth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string character_id = 1; */
        if (message.characterId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.characterId);
        /* repeated string ids = 2; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.RequestSetCharacterSetChatChannelAuth
 */
export const RequestSetCharacterSetChatChannelAuth = new RequestSetCharacterSetChatChannelAuth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestUpdateCharacterSetChatChannelAuth$Type extends MessageType<RequestUpdateCharacterSetChatChannelAuth> {
    constructor() {
        super("sro.chat.RequestUpdateCharacterSetChatChannelAuth", [
            { no: 1, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "add", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestUpdateCharacterSetChatChannelAuth>): RequestUpdateCharacterSetChatChannelAuth {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterId = "";
        message.add = false;
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<RequestUpdateCharacterSetChatChannelAuth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestUpdateCharacterSetChatChannelAuth): RequestUpdateCharacterSetChatChannelAuth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string character_id */ 1:
                    message.characterId = reader.string();
                    break;
                case /* bool add */ 2:
                    message.add = reader.bool();
                    break;
                case /* repeated string ids */ 3:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestUpdateCharacterSetChatChannelAuth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string character_id = 1; */
        if (message.characterId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.characterId);
        /* bool add = 2; */
        if (message.add !== false)
            writer.tag(2, WireType.Varint).bool(message.add);
        /* repeated string ids = 3; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.RequestUpdateCharacterSetChatChannelAuth
 */
export const RequestUpdateCharacterSetChatChannelAuth = new RequestUpdateCharacterSetChatChannelAuth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatChannel$Type extends MessageType<ChatChannel> {
    constructor() {
        super("sro.chat.ChatChannel", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dimension_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChatChannel>): ChatChannel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.dimensionId = "";
        message.public = false;
        if (value !== undefined)
            reflectionMergePartial<ChatChannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatChannel): ChatChannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string dimension_id */ 3:
                    message.dimensionId = reader.string();
                    break;
                case /* bool public */ 4:
                    message.public = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string dimension_id = 3; */
        if (message.dimensionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dimensionId);
        /* bool public = 4; */
        if (message.public !== false)
            writer.tag(4, WireType.Varint).bool(message.public);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatChannel
 */
export const ChatChannel = new ChatChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatChannels$Type extends MessageType<ChatChannels> {
    constructor() {
        super("sro.chat.ChatChannels", [
            { no: 1, name: "channels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatChannel }
        ]);
    }
    create(value?: PartialMessage<ChatChannels>): ChatChannels {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial<ChatChannels>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatChannels): ChatChannels {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sro.chat.ChatChannel channels */ 1:
                    message.channels.push(ChatChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatChannels, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sro.chat.ChatChannel channels = 1; */
        for (let i = 0; i < message.channels.length; i++)
            ChatChannel.internalBinaryWrite(message.channels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatChannels
 */
export const ChatChannels = new ChatChannels$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatChannelMessage$Type extends MessageType<CreateChatChannelMessage> {
    constructor() {
        super("sro.chat.CreateChatChannelMessage", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dimension_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateChatChannelMessage>): CreateChatChannelMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.dimensionId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateChatChannelMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatChannelMessage): CreateChatChannelMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string dimension_id */ 2:
                    message.dimensionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatChannelMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string dimension_id = 2; */
        if (message.dimensionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dimensionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.CreateChatChannelMessage
 */
export const CreateChatChannelMessage = new CreateChatChannelMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("sro.chat.ChatMessage", [
            { no: 1, name: "sender_character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sent_time_ms", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderCharacterId = "";
        message.content = "";
        message.sentTimeMs = 0;
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender_character_id */ 1:
                    message.senderCharacterId = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* int64 sent_time_ms */ 3:
                    message.sentTimeMs = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender_character_id = 1; */
        if (message.senderCharacterId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderCharacterId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* int64 sent_time_ms = 3; */
        if (message.sentTimeMs !== 0)
            writer.tag(3, WireType.Varint).int64(message.sentTimeMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendChatChannelMessageRequest$Type extends MessageType<SendChatChannelMessageRequest> {
    constructor() {
        super("sro.chat.SendChatChannelMessageRequest", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chat_message", kind: "message", T: () => ChatMessage }
        ]);
    }
    create(value?: PartialMessage<SendChatChannelMessageRequest>): SendChatChannelMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial<SendChatChannelMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendChatChannelMessageRequest): SendChatChannelMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* sro.chat.ChatMessage chat_message */ 2:
                    message.chatMessage = ChatMessage.internalBinaryRead(reader, reader.uint32(), options, message.chatMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendChatChannelMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* sro.chat.ChatMessage chat_message = 2; */
        if (message.chatMessage)
            ChatMessage.internalBinaryWrite(message.chatMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.SendChatChannelMessageRequest
 */
export const SendChatChannelMessageRequest = new SendChatChannelMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendDirectMessageRequest$Type extends MessageType<SendDirectMessageRequest> {
    constructor() {
        super("sro.chat.SendDirectMessageRequest", [
            { no: 1, name: "character_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chat_message", kind: "message", T: () => ChatMessage }
        ]);
    }
    create(value?: PartialMessage<SendDirectMessageRequest>): SendDirectMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterId = "";
        if (value !== undefined)
            reflectionMergePartial<SendDirectMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendDirectMessageRequest): SendDirectMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string character_id */ 1:
                    message.characterId = reader.string();
                    break;
                case /* sro.chat.ChatMessage chat_message */ 2:
                    message.chatMessage = ChatMessage.internalBinaryRead(reader, reader.uint32(), options, message.chatMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendDirectMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string character_id = 1; */
        if (message.characterId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.characterId);
        /* sro.chat.ChatMessage chat_message = 2; */
        if (message.chatMessage)
            ChatMessage.internalBinaryWrite(message.chatMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.SendDirectMessageRequest
 */
export const SendDirectMessageRequest = new SendDirectMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateChatChannelRequest$Type extends MessageType<UpdateChatChannelRequest> {
    constructor() {
        super("sro.chat.UpdateChatChannelRequest", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "optionalName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dimension", kind: "scalar", oneof: "optionalDimension", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public", kind: "scalar", oneof: "optionalPublic", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateChatChannelRequest>): UpdateChatChannelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelId = "";
        message.optionalName = { oneofKind: undefined };
        message.optionalDimension = { oneofKind: undefined };
        message.optionalPublic = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateChatChannelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateChatChannelRequest): UpdateChatChannelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* string name */ 2:
                    message.optionalName = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string dimension */ 3:
                    message.optionalDimension = {
                        oneofKind: "dimension",
                        dimension: reader.string()
                    };
                    break;
                case /* bool public */ 4:
                    message.optionalPublic = {
                        oneofKind: "public",
                        public: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateChatChannelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* string name = 2; */
        if (message.optionalName.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.optionalName.name);
        /* string dimension = 3; */
        if (message.optionalDimension.oneofKind === "dimension")
            writer.tag(3, WireType.LengthDelimited).string(message.optionalDimension.dimension);
        /* bool public = 4; */
        if (message.optionalPublic.oneofKind === "public")
            writer.tag(4, WireType.Varint).bool(message.optionalPublic.public);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.chat.UpdateChatChannelRequest
 */
export const UpdateChatChannelRequest = new UpdateChatChannelRequest$Type();
/**
 * @generated ServiceType for protobuf service sro.chat.ChatService
 */
export const ChatService = new ServiceType("sro.chat.ChatService", [
    { name: "ConnectChatChannel", serverStreaming: true, options: { "google.api.http": { get: "/v1/message/channel/id/{channel_id}" } }, I: ConnectChatChannelRequest, O: ChatMessage },
    { name: "ConnectDirectMessages", serverStreaming: true, options: { "google.api.http": { get: "/v1/message/character/id/{id}" } }, I: TargetId, O: ChatMessage },
    { name: "SendChatChannelMessage", options: { "google.api.http": { put: "/v1/message/channel/id/{channel_id}", body: "*" } }, I: SendChatChannelMessageRequest, O: Empty },
    { name: "SendDirectMessage", options: { "google.api.http": { put: "/v1/message/character/id/{character_id}", body: "*" } }, I: SendDirectMessageRequest, O: Empty },
    { name: "GetChatChannels", options: { "google.api.http": { get: "/v1/channels" } }, I: Empty, O: ChatChannels },
    { name: "GetChatChannel", options: { "google.api.http": { get: "/v1/channels/id/{id}" } }, I: TargetId, O: ChatChannel },
    { name: "CreateChatChannel", options: { "google.api.http": { post: "/v1/channels", body: "*" } }, I: CreateChatChannelMessage, O: ChatChannel },
    { name: "DeleteChatChannel", options: { "google.api.http": { delete: "/v1/channels/id/{id}" } }, I: TargetId, O: ChatChannel },
    { name: "EditChatChannel", options: { "google.api.http": { put: "/v1/channels/id/{channel_id}", body: "*" } }, I: UpdateChatChannelRequest, O: ChatChannel },
    { name: "GetAuthorizedChatChannels", options: { "google.api.http": { get: "/v1/character/id/{id}/channels" } }, I: TargetId, O: ChatChannels },
    { name: "SetCharacterChatChannelAuth", options: { "google.api.http": { post: "/v1/characters/id/{character_id}/channels" } }, I: RequestSetCharacterSetChatChannelAuth, O: Empty },
    { name: "UpdateCharacterChatChannelAuth", options: { "google.api.http": { put: "/v1/characters/id/{character_id}/channels" } }, I: RequestUpdateCharacterSetChatChannelAuth, O: Empty },
    { name: "BanCharacterFromChatChannel", options: { "google.api.http": { post: "/v1/characters/id/{character_id}/channels/{channel_id}/ban" } }, I: BanRequest, O: Empty },
    { name: "GetChatLogs", options: { "google.api.http": { get: "/v1/chat/{channel_id}/logs" } }, I: ChatLogRequest, O: ChatLogs }
]);

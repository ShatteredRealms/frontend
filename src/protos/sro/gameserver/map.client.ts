// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/gameserver/map.proto" (package "sro.gameserver", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MapService } from "./map";
import type { EditMapRequest } from "./map";
import type { CreateMapRequest } from "./map";
import type { Maps } from "./map";
import type { Empty } from "../../google/protobuf/empty";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Map } from "./map";
import type { TargetId } from "../globals";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sro.gameserver.MapService
 */
export interface IMapServiceClient {
    /**
     * @generated from protobuf rpc: GetMap(sro.TargetId) returns (sro.gameserver.Map);
     */
    getMap(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, Map>;
    /**
     * @generated from protobuf rpc: GetMaps(google.protobuf.Empty) returns (sro.gameserver.Maps);
     */
    getMaps(input: Empty, options?: RpcOptions): UnaryCall<Empty, Maps>;
    /**
     * @generated from protobuf rpc: CreateMap(sro.gameserver.CreateMapRequest) returns (sro.gameserver.Map);
     */
    createMap(input: CreateMapRequest, options?: RpcOptions): UnaryCall<CreateMapRequest, Map>;
    /**
     * @generated from protobuf rpc: EditMap(sro.gameserver.EditMapRequest) returns (sro.gameserver.Map);
     */
    editMap(input: EditMapRequest, options?: RpcOptions): UnaryCall<EditMapRequest, Map>;
    /**
     * @generated from protobuf rpc: DeleteMap(sro.TargetId) returns (google.protobuf.Empty);
     */
    deleteMap(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, Empty>;
}
/**
 * @generated from protobuf service sro.gameserver.MapService
 */
export class MapServiceClient implements IMapServiceClient, ServiceInfo {
    typeName = MapService.typeName;
    methods = MapService.methods;
    options = MapService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetMap(sro.TargetId) returns (sro.gameserver.Map);
     */
    getMap(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, Map> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, Map>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMaps(google.protobuf.Empty) returns (sro.gameserver.Maps);
     */
    getMaps(input: Empty, options?: RpcOptions): UnaryCall<Empty, Maps> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Maps>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateMap(sro.gameserver.CreateMapRequest) returns (sro.gameserver.Map);
     */
    createMap(input: CreateMapRequest, options?: RpcOptions): UnaryCall<CreateMapRequest, Map> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateMapRequest, Map>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EditMap(sro.gameserver.EditMapRequest) returns (sro.gameserver.Map);
     */
    editMap(input: EditMapRequest, options?: RpcOptions): UnaryCall<EditMapRequest, Map> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EditMapRequest, Map>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteMap(sro.TargetId) returns (google.protobuf.Empty);
     */
    deleteMap(input: TargetId, options?: RpcOptions): UnaryCall<TargetId, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TargetId, Empty>("unary", this._transport, method, opt, input);
    }
}

// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/gameserver/map.proto" (package "sro.gameserver", syntax proto3)
// tslint:disable
import { Empty } from "../../google/protobuf/empty";
import { TargetId } from "../globals";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sro.gameserver.CreateMapRequest
 */
export interface CreateMapRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string map_path = 2;
     */
    mapPath: string;
}
/**
 * @generated from protobuf message sro.gameserver.EditMapRequest
 */
export interface EditMapRequest {
    /**
     * @generated from protobuf field: string target_id = 1;
     */
    targetId: string;
    /**
     * @generated from protobuf oneof: optional_name
     */
    optionalName: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_map_path
     */
    optionalMapPath: {
        oneofKind: "mapPath";
        /**
         * @generated from protobuf field: string map_path = 3;
         */
        mapPath: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message sro.gameserver.Map
 */
export interface Map {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string map_path = 3;
     */
    mapPath: string;
}
/**
 * @generated from protobuf message sro.gameserver.Maps
 */
export interface Maps {
    /**
     * @generated from protobuf field: repeated sro.gameserver.Map maps = 1;
     */
    maps: Map[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateMapRequest$Type extends MessageType<CreateMapRequest> {
    constructor() {
        super("sro.gameserver.CreateMapRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "map_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMapRequest>): CreateMapRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.mapPath = "";
        if (value !== undefined)
            reflectionMergePartial<CreateMapRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMapRequest): CreateMapRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string map_path */ 2:
                    message.mapPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMapRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string map_path = 2; */
        if (message.mapPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mapPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.CreateMapRequest
 */
export const CreateMapRequest = new CreateMapRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditMapRequest$Type extends MessageType<EditMapRequest> {
    constructor() {
        super("sro.gameserver.EditMapRequest", [
            { no: 1, name: "target_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "optionalName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "map_path", kind: "scalar", oneof: "optionalMapPath", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditMapRequest>): EditMapRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetId = "";
        message.optionalName = { oneofKind: undefined };
        message.optionalMapPath = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<EditMapRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditMapRequest): EditMapRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string target_id */ 1:
                    message.targetId = reader.string();
                    break;
                case /* string name */ 2:
                    message.optionalName = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string map_path */ 3:
                    message.optionalMapPath = {
                        oneofKind: "mapPath",
                        mapPath: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditMapRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string target_id = 1; */
        if (message.targetId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.targetId);
        /* string name = 2; */
        if (message.optionalName.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.optionalName.name);
        /* string map_path = 3; */
        if (message.optionalMapPath.oneofKind === "mapPath")
            writer.tag(3, WireType.LengthDelimited).string(message.optionalMapPath.mapPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.EditMapRequest
 */
export const EditMapRequest = new EditMapRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Map$Type extends MessageType<Map> {
    constructor() {
        super("sro.gameserver.Map", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "map_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Map>): Map {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.mapPath = "";
        if (value !== undefined)
            reflectionMergePartial<Map>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Map): Map {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string map_path */ 3:
                    message.mapPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Map, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string map_path = 3; */
        if (message.mapPath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mapPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.Map
 */
export const Map = new Map$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Maps$Type extends MessageType<Maps> {
    constructor() {
        super("sro.gameserver.Maps", [
            { no: 1, name: "maps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Map }
        ]);
    }
    create(value?: PartialMessage<Maps>): Maps {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maps = [];
        if (value !== undefined)
            reflectionMergePartial<Maps>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Maps): Maps {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sro.gameserver.Map maps */ 1:
                    message.maps.push(Map.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Maps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sro.gameserver.Map maps = 1; */
        for (let i = 0; i < message.maps.length; i++)
            Map.internalBinaryWrite(message.maps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.Maps
 */
export const Maps = new Maps$Type();
/**
 * @generated ServiceType for protobuf service sro.gameserver.MapService
 */
export const MapService = new ServiceType("sro.gameserver.MapService", [
    { name: "GetMap", options: { "google.api.http": { get: "/v1/maps/id/{id}" } }, I: TargetId, O: Map },
    { name: "GetMaps", options: { "google.api.http": { get: "/v1/maps" } }, I: Empty, O: Maps },
    { name: "CreateMap", options: { "google.api.http": { post: "/v1/maps", body: "*" } }, I: CreateMapRequest, O: Map },
    { name: "EditMap", options: { "google.api.http": { put: "/v1/maps/id/{target_id}", body: "*" } }, I: EditMapRequest, O: Map },
    { name: "DeleteMap", options: { "google.api.http": { delete: "/v1/maps/id/{id}" } }, I: TargetId, O: Empty }
]);

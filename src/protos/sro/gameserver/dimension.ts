// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sro/gameserver/dimension.proto" (package "sro.gameserver", syntax proto3)
// tslint:disable
import { Empty } from "../../google/protobuf/empty";
import { TargetId } from "../globals";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sro.gameserver.CreateDimensionRequest
 */
export interface CreateDimensionRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: repeated string map_ids = 3;
     */
    mapIds: string[];
    /**
     * @generated from protobuf field: string location = 4;
     */
    location: string;
}
/**
 * @generated from protobuf message sro.gameserver.DuplicateDimensionRequest
 */
export interface DuplicateDimensionRequest {
    /**
     * @generated from protobuf field: string target_id = 1;
     */
    targetId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message sro.gameserver.EditDimensionRequest
 */
export interface EditDimensionRequest {
    /**
     * @generated from protobuf field: string target_id = 1;
     */
    targetId: string;
    /**
     * @generated from protobuf oneof: optional_name
     */
    optionalName: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: optional_version
     */
    optionalVersion: {
        oneofKind: "version";
        /**
         * @generated from protobuf field: string version = 3;
         */
        version: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: bool edit_maps = 4;
     */
    editMaps: boolean;
    /**
     * @generated from protobuf field: repeated string map_ids = 5;
     */
    mapIds: string[];
    /**
     * @generated from protobuf oneof: optional_location
     */
    optionalLocation: {
        oneofKind: "location";
        /**
         * @generated from protobuf field: string location = 8;
         */
        location: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message sro.gameserver.Dimension
 */
export interface Dimension {
    /**
     * Unique id for the dimension
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Unique name of the dimension
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * Server version used for each server instance
     *
     * @generated from protobuf field: string version = 3;
     */
    version: string;
    /**
     * All maps the realm should have available
     *
     * @generated from protobuf field: repeated string map_ids = 4;
     */
    mapIds: string[];
    /**
     * Physical server location
     *
     * @generated from protobuf field: string location = 6;
     */
    location: string;
}
/**
 * @generated from protobuf message sro.gameserver.Dimensions
 */
export interface Dimensions {
    /**
     * @generated from protobuf field: repeated sro.gameserver.Dimension dimensions = 1;
     */
    dimensions: Dimension[];
}
/**
 * @generated from protobuf message sro.gameserver.GameServerUpdateResponse
 */
export interface GameServerUpdateResponse {
    /**
     * @generated from protobuf field: repeated string map_ids_created = 1;
     */
    mapIdsCreated: string[];
    /**
     * @generated from protobuf field: repeated string map_ids_deleted = 2;
     */
    mapIdsDeleted: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateDimensionRequest$Type extends MessageType<CreateDimensionRequest> {
    constructor() {
        super("sro.gameserver.CreateDimensionRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "map_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDimensionRequest>): CreateDimensionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.version = "";
        message.mapIds = [];
        message.location = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDimensionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDimensionRequest): CreateDimensionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* repeated string map_ids */ 3:
                    message.mapIds.push(reader.string());
                    break;
                case /* string location */ 4:
                    message.location = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDimensionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* repeated string map_ids = 3; */
        for (let i = 0; i < message.mapIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.mapIds[i]);
        /* string location = 4; */
        if (message.location !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.CreateDimensionRequest
 */
export const CreateDimensionRequest = new CreateDimensionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DuplicateDimensionRequest$Type extends MessageType<DuplicateDimensionRequest> {
    constructor() {
        super("sro.gameserver.DuplicateDimensionRequest", [
            { no: 1, name: "target_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DuplicateDimensionRequest>): DuplicateDimensionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DuplicateDimensionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DuplicateDimensionRequest): DuplicateDimensionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string target_id */ 1:
                    message.targetId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DuplicateDimensionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string target_id = 1; */
        if (message.targetId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.targetId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.DuplicateDimensionRequest
 */
export const DuplicateDimensionRequest = new DuplicateDimensionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditDimensionRequest$Type extends MessageType<EditDimensionRequest> {
    constructor() {
        super("sro.gameserver.EditDimensionRequest", [
            { no: 1, name: "target_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "optionalName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", oneof: "optionalVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "edit_maps", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "map_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "location", kind: "scalar", oneof: "optionalLocation", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditDimensionRequest>): EditDimensionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetId = "";
        message.optionalName = { oneofKind: undefined };
        message.optionalVersion = { oneofKind: undefined };
        message.editMaps = false;
        message.mapIds = [];
        message.optionalLocation = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<EditDimensionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditDimensionRequest): EditDimensionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string target_id */ 1:
                    message.targetId = reader.string();
                    break;
                case /* string name */ 2:
                    message.optionalName = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string version */ 3:
                    message.optionalVersion = {
                        oneofKind: "version",
                        version: reader.string()
                    };
                    break;
                case /* bool edit_maps */ 4:
                    message.editMaps = reader.bool();
                    break;
                case /* repeated string map_ids */ 5:
                    message.mapIds.push(reader.string());
                    break;
                case /* string location */ 8:
                    message.optionalLocation = {
                        oneofKind: "location",
                        location: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditDimensionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string target_id = 1; */
        if (message.targetId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.targetId);
        /* string name = 2; */
        if (message.optionalName.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.optionalName.name);
        /* string version = 3; */
        if (message.optionalVersion.oneofKind === "version")
            writer.tag(3, WireType.LengthDelimited).string(message.optionalVersion.version);
        /* bool edit_maps = 4; */
        if (message.editMaps !== false)
            writer.tag(4, WireType.Varint).bool(message.editMaps);
        /* repeated string map_ids = 5; */
        for (let i = 0; i < message.mapIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.mapIds[i]);
        /* string location = 8; */
        if (message.optionalLocation.oneofKind === "location")
            writer.tag(8, WireType.LengthDelimited).string(message.optionalLocation.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.EditDimensionRequest
 */
export const EditDimensionRequest = new EditDimensionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimension$Type extends MessageType<Dimension> {
    constructor() {
        super("sro.gameserver.Dimension", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "map_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Dimension>): Dimension {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.version = "";
        message.mapIds = [];
        message.location = "";
        if (value !== undefined)
            reflectionMergePartial<Dimension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dimension): Dimension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string version */ 3:
                    message.version = reader.string();
                    break;
                case /* repeated string map_ids */ 4:
                    message.mapIds.push(reader.string());
                    break;
                case /* string location */ 6:
                    message.location = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dimension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string version = 3; */
        if (message.version !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.version);
        /* repeated string map_ids = 4; */
        for (let i = 0; i < message.mapIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.mapIds[i]);
        /* string location = 6; */
        if (message.location !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.Dimension
 */
export const Dimension = new Dimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimensions$Type extends MessageType<Dimensions> {
    constructor() {
        super("sro.gameserver.Dimensions", [
            { no: 1, name: "dimensions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Dimension }
        ]);
    }
    create(value?: PartialMessage<Dimensions>): Dimensions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dimensions = [];
        if (value !== undefined)
            reflectionMergePartial<Dimensions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dimensions): Dimensions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sro.gameserver.Dimension dimensions */ 1:
                    message.dimensions.push(Dimension.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dimensions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sro.gameserver.Dimension dimensions = 1; */
        for (let i = 0; i < message.dimensions.length; i++)
            Dimension.internalBinaryWrite(message.dimensions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.Dimensions
 */
export const Dimensions = new Dimensions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameServerUpdateResponse$Type extends MessageType<GameServerUpdateResponse> {
    constructor() {
        super("sro.gameserver.GameServerUpdateResponse", [
            { no: 1, name: "map_ids_created", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "map_ids_deleted", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameServerUpdateResponse>): GameServerUpdateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapIdsCreated = [];
        message.mapIdsDeleted = [];
        if (value !== undefined)
            reflectionMergePartial<GameServerUpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameServerUpdateResponse): GameServerUpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string map_ids_created */ 1:
                    message.mapIdsCreated.push(reader.string());
                    break;
                case /* repeated string map_ids_deleted */ 2:
                    message.mapIdsDeleted.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameServerUpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string map_ids_created = 1; */
        for (let i = 0; i < message.mapIdsCreated.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.mapIdsCreated[i]);
        /* repeated string map_ids_deleted = 2; */
        for (let i = 0; i < message.mapIdsDeleted.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.mapIdsDeleted[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sro.gameserver.GameServerUpdateResponse
 */
export const GameServerUpdateResponse = new GameServerUpdateResponse$Type();
/**
 * @generated ServiceType for protobuf service sro.gameserver.DimensionService
 */
export const DimensionService = new ServiceType("sro.gameserver.DimensionService", [
    { name: "GetDimension", options: { "google.api.http": { get: "/v1/dimensions/id/{id}" } }, I: TargetId, O: Dimension },
    { name: "GetDimensions", options: { "google.api.http": { get: "/v1/dimensions" } }, I: Empty, O: Dimensions },
    { name: "CreateDimension", options: { "google.api.http": { post: "/v1/dimensions", body: "*" } }, I: CreateDimensionRequest, O: Dimension },
    { name: "DuplicateDimension", options: { "google.api.http": { post: "/v1/dimensions/id/{target_id}/duplicate", body: "*" } }, I: DuplicateDimensionRequest, O: Dimension },
    { name: "EditDimension", options: { "google.api.http": { put: "/v1/dimensions/id/{target_id}", body: "*" } }, I: EditDimensionRequest, O: Dimension },
    { name: "DeleteDimension", options: { "google.api.http": { delete: "/v1/dimensions/id/{id}" } }, I: TargetId, O: Empty },
    { name: "GameServerUpdate", options: { "google.api.http": { post: "/v1/dimensions/id/{id}/update" } }, I: TargetId, O: GameServerUpdateResponse }
]);
